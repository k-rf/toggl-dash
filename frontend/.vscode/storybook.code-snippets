{
  // Place your frontend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Element": {
    "scope": "typescriptreact",
    "prefix": "el",
    "body": [
      "import { $1, $1Props } from \"@mui/material\";",
      "",
      "type Props = Pick<$1Props, \"$2\">;",
      "",
      "export const El$1 = (props: Props) => {",
      "  return <$1 {...props} />;",
      "};",
      ""
    ]
  },
  "Storybook": {
    "scope": "typescriptreact",
    "prefix": "sb",
    "body": [
      "import type { Meta, StoryObj } from \"@storybook/react\";",
      "import { userEvent, waitFor, within } from \"@storybook/testing-library\";",
      "",
      "import { $1 } from \"./$1\";",
      "",
      "export default { component: $1 } as Meta<typeof $1>;",
      "",
      "type Story = StoryObj<typeof $1>;",
      "",
      "export const Default: Story = {",
      "  args: {",
      "    $0",
      "  }",
      "};"
    ]
  },
  "Play Function": {
    "scope": "typescriptreact",
    "prefix": "play",
    "body": [
      "play: async ({ canvasElement }) => {",
      "  const canvas = within(canvasElement);",
      "",
      "$0",
      "},"
    ]
  }
}
